{"version":3,"sources":["serviceWorker.js","list.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","List","onClick","_this","props","onMark","id","react_default","a","createElement","className","this","listitem","markText","item","Component","App","state","addList","ListData","updateList","event","newData","target","value","orignalState","copy","Object","assign","name","setState","sumited","slice","preventDefault","push","clearlist","markTheitem","index","clearcompletedlist","result","filter","testitem","_this2","toDoList","map","toDoData","list","onSubmit","type","aria-label","aria-describedby","onChange","placeholder","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCaSC,oNAvBXC,QAAU,WACNC,EAAKC,MAAMC,OAAOF,EAAKC,MAAME,6EAK7B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEXH,EAAAC,EAAAC,cAAA,MAAIP,QAASS,KAAKT,SAEdK,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,KAAKP,MAAMQ,SAASC,UAC9BF,KAAKP,MAAMQ,SAASE,eAjB1BC,cCmIJC,6MA9HbC,MAAQ,CACNJ,SAAU,QACVK,QAAS,GACTC,SAAU,CACRL,KAAM,OAMVM,WAAa,SAACC,GAEZ,IAAMC,EAAUD,EAAME,OAAOC,MAEvBC,EAAetB,EAAKc,MAAME,SAE1BO,EAAOC,OAAOC,OAAO,GAAIH,GAI/BC,EAFYL,EAAME,OAAOM,MAEbP,EAEZnB,EAAK2B,SAAS,CACZX,SAAUO,OAIdK,QAAU,SAACV,GAGT,IAAMK,EAAOvB,EAAKc,MAAMC,QAAQc,MAAM,GAEtCX,EAAMY,iBAENP,EAAKQ,KAAK/B,EAAKc,MAAME,UAErBhB,EAAK2B,SAAS,CACZZ,QAASQ,EAETP,SAAU,CACRL,KAAM,SASZqB,UAAY,SAACd,GACXA,EAAMY,iBACN9B,EAAK2B,SAAS,CACZZ,QAAS,QAKbkB,YAAc,SAACC,GAEb,IAAMX,EAAOvB,EAAKc,MAAMC,QAAQc,MAAM,GAET,UAAzBN,EAAKW,GAAOxB,SACda,EAAKW,GAAOxB,SAAW,WAEvBa,EAAKW,GAAOxB,SAAW,QAGzBV,EAAK2B,SAAS,CACZZ,QAASQ,OAMbY,mBAAqB,SAACjB,GACpBA,EAAMY,iBAEN,IAAMM,EAASpC,EAAKc,MAAMC,QAAQsB,OAAO,SAACC,GAExC,MAA0B,aAAtBA,EAAS5B,WAOfV,EAAK2B,SAAS,CACZZ,QAASqB,6EAKJ,IAAAG,EAAA/B,KAEDgC,EAAWhC,KAAKM,MAAMC,QAAQ0B,IAAI,SAACC,EAAUR,GACjD,OAAO9B,EAAAC,EAAAC,cAACqC,EAAD,CAAMzC,OAAQqC,EAAKN,YAAaxB,SAAUiC,EAAUvC,GAAI+B,MAGjE,OAEE9B,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QAAMsC,SAAUpC,KAAKoB,SAEnBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,OAAOtC,UAAU,eAAeuC,aAAW,uBAAuBC,mBAAiB,4BAA4BrB,KAAK,OAAOsB,SAAUxC,KAAKS,WAAYI,MAAOb,KAAKM,MAAME,SAASL,KAAMsC,YAAY,oBAGjN7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQuC,KAAK,SAAStC,UAAU,wBAAhC,OACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBR,QAASS,KAAKwB,WAAvD,SACA5B,EAAAC,EAAAC,cAAA,UAAQP,QAASS,KAAK2B,mBAAoB5B,UAAU,wBAApD,UAKHiC,UAxHS5B,mBCClBsC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SH0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30827b02.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\n\nclass List extends Component {\n\n\n    // every time click any task will take the index and send it to \n    //markTheitem function \n    onClick = () => {\n        this.props.onMark(this.props.id)\n    }\n\n\n    render() {\n        return (\n            <div className='showlist'>\n\n                <ul onClick={this.onClick}>\n\n                    <li className={this.props.listitem.markText}>\n                        {this.props.listitem.item}\n                    </li>\n\n                </ul>\n\n\n            </div>\n\n        );\n    }\n}\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './list'\n//import Time from './time'\n\n\nclass App extends Component {\n\n  state = {\n    markText: 'false',\n    addList: [],\n    ListData: {\n      item: ''\n    }\n  }\n\n\n\n  updateList = (event) => {\n    //get the value the user typed\n    const newData = event.target.value;\n    //get the orignal state.\n    const orignalState = this.state.ListData;\n    //make a copy of the orignal state.\n    const copy = Object.assign({}, orignalState)\n    //get new key from name of input\n    const key = event.target.name;\n    //update the copy with data the user typed \n    copy[key] = newData;\n    //updata the state with the new copy\n    this.setState({\n      ListData: copy\n    })\n  }\n\n  sumited = (event) => {\n\n    //make a copy of the addList array using slice\n    const copy = this.state.addList.slice(0);\n    //prevent the form from refreshing the page\n    event.preventDefault();\n    //add the new data to the array\n    copy.push(this.state.ListData)\n    //update the state with our new copy\n    this.setState({\n      addList: copy,\n      // to clear the input box\n      ListData: {\n        item: ''\n\n      }\n\n    })\n\n  }\n\n  //Will clear all the array when the user click the clear button.\n  clearlist = (event) => {\n    event.preventDefault();\n    this.setState({\n      addList: []\n    })\n  }\n\n  // function to get passed to List component.check\n  markTheitem = (index) => {\n    //make copy from the array \n    const copy = this.state.addList.slice(0);\n    //Take every item from the array and mark it when the user click to it.\n    if (copy[index].markText === 'false')\n      copy[index].markText = 'markitem';\n    else {\n      copy[index].markText = 'false';\n    }\n    //update the array.\n    this.setState({\n      addList: copy\n    })\n\n  }\n\n  //the function will remove only the completed item.\n  clearcompletedlist = (event) => {\n    event.preventDefault();\n    //if the item marked ,the filter function will removed the item . \n    const result = this.state.addList.filter((testitem) => {\n\n      if (testitem.markText === 'markitem') {\n        return false;\n      } else {\n        return true;\n      }\n    })\n    // update the array with the new array.\n    this.setState({\n      addList: result\n    })\n\n  }\n\n  render() {\n\n    const toDoList = this.state.addList.map((toDoData, index) => {\n      return <List onMark={this.markTheitem} listitem={toDoData} id={index} />;\n\n    })\n    return (\n\n      <div>\n\n\n        <h1>To Do List</h1>\n        <form onSubmit={this.sumited}>\n\n          <div className=\"input-group col-sm-5 mx-auto\">\n            <input type='text' className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" name=\"item\" onChange={this.updateList} value={this.state.ListData.item} placeholder='write here ...'></input>\n          </div>\n\n          <div className=\"my-4\">\n            <button type=\"submit\" className=\"btn btn-outline-dark\">ADD</button>\n            <button className=\"btn btn-outline-dark\" onClick={this.clearlist} >Clear</button>\n            <button onClick={this.clearcompletedlist} className=\"btn btn-outline-dark\">Done</button>\n          </div>\n\n        </form>\n\n        {toDoList}\n\n      </div >\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\"\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}